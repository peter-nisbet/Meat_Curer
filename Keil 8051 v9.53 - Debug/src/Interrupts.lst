C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/12/2017 13:32:30 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INTERRUPTS
OBJECT MODULE PLACED IN .\src\Interrupts.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\pnisbet
                    -\Documents\Silabs_Workspace\Meat_Curer\src\Interrupts.c SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3
                    -) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\pnisbet\Documents\Silabs_Workspace\Meat
                    -_Curer\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.9//kits/common/drivers/efm8_retargetserial;C:/Sil
                    -iconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.9//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/dev
                    -eloper/sdks/8051/v4.0.9//Device/EFM8SB1/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.9/kits/common/bs
                    -p;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.9//kits/EFM8SB1_SLSTK2010A/config;C:/SiliconLabs/Simplicit
                    -yStudio/v4/developer/sdks/8051/v4.0.9//kits/common/bsp) PRINT(.\src\Interrupts.lst) COND PAGEWIDTH(120) PAGELENGTH(65) O
                    -BJECT(.\src\Interrupts.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interrupts.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8SB1_Register_Enums.h>
  11          #include "smbus.h"
  12          
  13          //-----------------------------------------------------------------------------
  14          // SMBUS0_ISR
  15          //-----------------------------------------------------------------------------
  16          //
  17          // SMBUS0 ISR Content goes here. Remember to clear flag bits:
  18          // SMB0CN0::SI (SMBus Interrupt Flag)
  19          //
  20          //-----------------------------------------------------------------------------
  21          SI_INTERRUPT (SMBUS0_ISR, SMBUS0_IRQn)
  22          {
  23   1          bool FAIL = 0;                       // Used by the ISR to flag failed
  24   1                                              // transfers
  25   1          static bool ADDR_SEND = 0;           // Used by the ISR to flag byte
  26   1                                              // transmissions as slave addresses
  27   1      
  28   1          if (SMB0CN0_ARBLOST == 0)            // Check for errors
  29   1          {
  30   2            // Normal operation
  31   2            switch (SMB0CN0 & 0xF0)            // Status vector
  32   2            {
  33   3                   // Master Transmitter/Receiver: START condition transmitted.
  34   3                   case SMB_MTSTA:
  35   3                          SMB0DAT = TARGET;   // Load address of the target slave
  36   3                          SMB0DAT &= 0xFE;    // Clear the LSB of the address for the
  37   3                                              // R/W bit
  38   3                          SMB0DAT |= SMB_RW;  // Load R/W bit
  39   3                          SMB0CN0_STA = 0;     // Manually clear START bit
  40   3                          ADDR_SEND = 1;
  41   3                          break;
  42   3      
  43   3                   // Master Transmitter: Data byte transmitted
  44   3                   case SMB_MTDB:
  45   3                          if (SMB0CN0_ACK)            // Slave SMB0CN_ACK?
  46   3                          {
  47   4                             if (ADDR_SEND)          // If the previous byte was a slave
  48   4                             {                       // address,
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/12/2017 13:32:30 PAGE 2   

  49   5                                    ADDR_SEND = 0;   // Next byte is not a slave address
  50   5                                    if (SMB_RW == WRITE) // If this transfer is a WRITE,
  51   5                                    {
  52   6                                           // send data byte
  53   6                                           SMB0DAT = SMB_DATA_OUT;
  54   6                                    }
  55   5                                    else {}          // If this transfer is a READ,
  56   5                                                     // proceed with transfer without
  57   5                                                     // writing to SMB0DAT (switch
  58   5                                                     // to receive mode)
  59   5                             }
  60   4                             else                    // If previous byte was not a slave
  61   4                             {                       // address,
  62   5                                    SMB0CN0_STO = 1;  // Set SMB0CN_STO to terminate transfer
  63   5                                    SMB_BUSY = 0;    // And free SMBus interface
  64   5                             }
  65   4                          }
  66   3                          else                       // If slave NACK,
  67   3                          {
  68   4                             SMB0CN0_STO = 1;         // Send STOP condition, followed
  69   4                             SMB0CN0_STA = 1;         // By a START
  70   4                             NUM_ERRORS++;           // Indicate error
  71   4                          }
  72   3                          break;
  73   3      
  74   3                   // Master Receiver: byte received
  75   3                   case SMB_MRDB:
  76   3                          SMB_DATA_IN = SMB0DAT;     // Store received byte
  77   3                          SMB_BUSY = 0;              // Free SMBus interface
  78   3                          SMB0CN0_ACK = 0;            // Send NACK to indicate last byte
  79   3                                                     // of this transfer
  80   3      
  81   3                          SMB0CN0_STO = 1;            // Send STOP to terminate transfer
  82   3                          break;
  83   3      
  84   3                   default:
  85   3                          FAIL = 1;                  // Indicate failed transfer
  86   3                                                     // and handle at end of ISR
  87   3                          break;
  88   3      
  89   3            } // end switch
  90   2          }
  91   1          else
  92   1          {
  93   2            // SMB0CN_ARBLOST = 1, error occurred... abort transmission
  94   2            FAIL = 1;
  95   2          } // end SMB0CN_ARBLOST if
  96   1      
  97   1          if (FAIL)                                  // If the transfer failed,
  98   1          {
  99   2            SMB0CF &= ~0x80;                         // Reset communication
 100   2            SMB0CF |= 0x80;
 101   2            SMB0CN0_STA = 0;
 102   2            SMB0CN0_STO = 0;
 103   2            SMB0CN0_ACK = 0;
 104   2      
 105   2            SMB_BUSY = 0;                            // Free SMBus
 106   2      
 107   2            FAIL = 0;
 108   2      
 109   2            NUM_ERRORS++;                            // Indicate an error occurred
 110   2          }
 111   1      
C51 COMPILER V9.53.0.0   INTERRUPTS                                                        12/12/2017 13:32:30 PAGE 3   

 112   1          SMB0CN0_SI = 0;                             // Clear interrupt flag
 113   1      }
 114          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    130    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
